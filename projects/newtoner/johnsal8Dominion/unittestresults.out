TESTING gainCard():
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to discard.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to deck.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, card added to hand.
gainCard() test: PASS, supply decreased and gainCard returned 0.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
gainCard() test: PASS, function called on empty supply and no state change occurred for any card piles.
All tests passed!
TESTING updateCoins():
Test player 0 with 1 treasure card(s) and 0 bonus.
G.coins = 1, expected = 1
G.coins = 2, expected = 2
G.coins = 3, expected = 3
G.coins = 0, expected = 0
Test player 0 with 1 treasure card(s) and 1 bonus.
G.coins = 2, expected = 2
G.coins = 3, expected = 3
G.coins = 4, expected = 4
G.coins = 1, expected = 1
Test player 0 with 1 treasure card(s) and 2 bonus.
G.coins = 3, expected = 3
G.coins = 4, expected = 4
G.coins = 5, expected = 5
G.coins = 2, expected = 2
Test player 0 with 1 treasure card(s) and 3 bonus.
G.coins = 4, expected = 4
G.coins = 5, expected = 5
G.coins = 6, expected = 6
G.coins = 3, expected = 3
Test player 0 with 1 treasure card(s) and 4 bonus.
G.coins = 5, expected = 5
G.coins = 6, expected = 6
G.coins = 7, expected = 7
G.coins = 4, expected = 4
Test player 0 with 1 treasure card(s) and 5 bonus.
G.coins = 6, expected = 6
G.coins = 7, expected = 7
G.coins = 8, expected = 8
G.coins = 5, expected = 5
Test player 0 with 1 treasure card(s) and 6 bonus.
G.coins = 7, expected = 7
G.coins = 8, expected = 8
G.coins = 9, expected = 9
G.coins = 6, expected = 6
Test player 0 with 1 treasure card(s) and 7 bonus.
G.coins = 8, expected = 8
G.coins = 9, expected = 9
G.coins = 10, expected = 10
G.coins = 7, expected = 7
Test player 0 with 1 treasure card(s) and 8 bonus.
G.coins = 9, expected = 9
G.coins = 10, expected = 10
G.coins = 11, expected = 11
G.coins = 8, expected = 8
Test player 0 with 1 treasure card(s) and 9 bonus.
G.coins = 10, expected = 10
G.coins = 11, expected = 11
G.coins = 12, expected = 12
G.coins = 9, expected = 9
Test player 0 with 1 treasure card(s) and 10 bonus.
G.coins = 11, expected = 11
G.coins = 12, expected = 12
G.coins = 13, expected = 13
G.coins = 10, expected = 10
Test player 0 with 2 treasure card(s) and 0 bonus.
G.coins = 2, expected = 2
G.coins = 4, expected = 4
G.coins = 6, expected = 6
G.coins = 0, expected = 0
Test player 0 with 2 treasure card(s) and 1 bonus.
G.coins = 3, expected = 3
G.coins = 5, expected = 5
G.coins = 7, expected = 7
G.coins = 1, expected = 1
Test player 0 with 2 treasure card(s) and 2 bonus.
G.coins = 4, expected = 4
G.coins = 6, expected = 6
G.coins = 8, expected = 8
G.coins = 2, expected = 2
Test player 0 with 2 treasure card(s) and 3 bonus.
G.coins = 5, expected = 5
G.coins = 7, expected = 7
G.coins = 9, expected = 9
G.coins = 3, expected = 3
Test player 0 with 2 treasure card(s) and 4 bonus.
G.coins = 6, expected = 6
G.coins = 8, expected = 8
G.coins = 10, expected = 10
G.coins = 4, expected = 4
Test player 0 with 2 treasure card(s) and 5 bonus.
G.coins = 7, expected = 7
G.coins = 9, expected = 9
G.coins = 11, expected = 11
G.coins = 5, expected = 5
Test player 0 with 2 treasure card(s) and 6 bonus.
G.coins = 8, expected = 8
G.coins = 10, expected = 10
G.coins = 12, expected = 12
G.coins = 6, expected = 6
Test player 0 with 2 treasure card(s) and 7 bonus.
G.coins = 9, expected = 9
G.coins = 11, expected = 11
G.coins = 13, expected = 13
G.coins = 7, expected = 7
Test player 0 with 2 treasure card(s) and 8 bonus.
G.coins = 10, expected = 10
G.coins = 12, expected = 12
G.coins = 14, expected = 14
G.coins = 8, expected = 8
Test player 0 with 2 treasure card(s) and 9 bonus.
G.coins = 11, expected = 11
G.coins = 13, expected = 13
G.coins = 15, expected = 15
G.coins = 9, expected = 9
Test player 0 with 2 treasure card(s) and 10 bonus.
G.coins = 12, expected = 12
G.coins = 14, expected = 14
G.coins = 16, expected = 16
G.coins = 10, expected = 10
Test player 0 with 3 treasure card(s) and 0 bonus.
G.coins = 3, expected = 3
G.coins = 6, expected = 6
G.coins = 9, expected = 9
G.coins = 0, expected = 0
Test player 0 with 3 treasure card(s) and 1 bonus.
G.coins = 4, expected = 4
G.coins = 7, expected = 7
G.coins = 10, expected = 10
G.coins = 1, expected = 1
Test player 0 with 3 treasure card(s) and 2 bonus.
G.coins = 5, expected = 5
G.coins = 8, expected = 8
G.coins = 11, expected = 11
G.coins = 2, expected = 2
Test player 0 with 3 treasure card(s) and 3 bonus.
G.coins = 6, expected = 6
G.coins = 9, expected = 9
G.coins = 12, expected = 12
G.coins = 3, expected = 3
Test player 0 with 3 treasure card(s) and 4 bonus.
G.coins = 7, expected = 7
G.coins = 10, expected = 10
G.coins = 13, expected = 13
G.coins = 4, expected = 4
Test player 0 with 3 treasure card(s) and 5 bonus.
G.coins = 8, expected = 8
G.coins = 11, expected = 11
G.coins = 14, expected = 14
G.coins = 5, expected = 5
Test player 0 with 3 treasure card(s) and 6 bonus.
G.coins = 9, expected = 9
G.coins = 12, expected = 12
G.coins = 15, expected = 15
G.coins = 6, expected = 6
Test player 0 with 3 treasure card(s) and 7 bonus.
G.coins = 10, expected = 10
G.coins = 13, expected = 13
G.coins = 16, expected = 16
G.coins = 7, expected = 7
Test player 0 with 3 treasure card(s) and 8 bonus.
G.coins = 11, expected = 11
G.coins = 14, expected = 14
G.coins = 17, expected = 17
G.coins = 8, expected = 8
Test player 0 with 3 treasure card(s) and 9 bonus.
G.coins = 12, expected = 12
G.coins = 15, expected = 15
G.coins = 18, expected = 18
G.coins = 9, expected = 9
Test player 0 with 3 treasure card(s) and 10 bonus.
G.coins = 13, expected = 13
G.coins = 16, expected = 16
G.coins = 19, expected = 19
G.coins = 10, expected = 10
Test player 0 with 4 treasure card(s) and 0 bonus.
G.coins = 4, expected = 4
G.coins = 8, expected = 8
G.coins = 12, expected = 12
G.coins = 0, expected = 0
Test player 0 with 4 treasure card(s) and 1 bonus.
G.coins = 5, expected = 5
G.coins = 9, expected = 9
G.coins = 13, expected = 13
G.coins = 1, expected = 1
Test player 0 with 4 treasure card(s) and 2 bonus.
G.coins = 6, expected = 6
G.coins = 10, expected = 10
G.coins = 14, expected = 14
G.coins = 2, expected = 2
Test player 0 with 4 treasure card(s) and 3 bonus.
G.coins = 7, expected = 7
G.coins = 11, expected = 11
G.coins = 15, expected = 15
G.coins = 3, expected = 3
Test player 0 with 4 treasure card(s) and 4 bonus.
G.coins = 8, expected = 8
G.coins = 12, expected = 12
G.coins = 16, expected = 16
G.coins = 4, expected = 4
Test player 0 with 4 treasure card(s) and 5 bonus.
G.coins = 9, expected = 9
G.coins = 13, expected = 13
G.coins = 17, expected = 17
G.coins = 5, expected = 5
Test player 0 with 4 treasure card(s) and 6 bonus.
G.coins = 10, expected = 10
G.coins = 14, expected = 14
G.coins = 18, expected = 18
G.coins = 6, expected = 6
Test player 0 with 4 treasure card(s) and 7 bonus.
G.coins = 11, expected = 11
G.coins = 15, expected = 15
G.coins = 19, expected = 19
G.coins = 7, expected = 7
Test player 0 with 4 treasure card(s) and 8 bonus.
G.coins = 12, expected = 12
G.coins = 16, expected = 16
G.coins = 20, expected = 20
G.coins = 8, expected = 8
Test player 0 with 4 treasure card(s) and 9 bonus.
G.coins = 13, expected = 13
G.coins = 17, expected = 17
G.coins = 21, expected = 21
G.coins = 9, expected = 9
Test player 0 with 4 treasure card(s) and 10 bonus.
G.coins = 14, expected = 14
G.coins = 18, expected = 18
G.coins = 22, expected = 22
G.coins = 10, expected = 10
Test player 0 with 5 treasure card(s) and 0 bonus.
G.coins = 5, expected = 5
G.coins = 10, expected = 10
G.coins = 15, expected = 15
G.coins = 0, expected = 0
Test player 0 with 5 treasure card(s) and 1 bonus.
G.coins = 6, expected = 6
G.coins = 11, expected = 11
G.coins = 16, expected = 16
G.coins = 1, expected = 1
Test player 0 with 5 treasure card(s) and 2 bonus.
G.coins = 7, expected = 7
G.coins = 12, expected = 12
G.coins = 17, expected = 17
G.coins = 2, expected = 2
Test player 0 with 5 treasure card(s) and 3 bonus.
G.coins = 8, expected = 8
G.coins = 13, expected = 13
G.coins = 18, expected = 18
G.coins = 3, expected = 3
Test player 0 with 5 treasure card(s) and 4 bonus.
G.coins = 9, expected = 9
G.coins = 14, expected = 14
G.coins = 19, expected = 19
G.coins = 4, expected = 4
Test player 0 with 5 treasure card(s) and 5 bonus.
G.coins = 10, expected = 10
G.coins = 15, expected = 15
G.coins = 20, expected = 20
G.coins = 5, expected = 5
Test player 0 with 5 treasure card(s) and 6 bonus.
G.coins = 11, expected = 11
G.coins = 16, expected = 16
G.coins = 21, expected = 21
G.coins = 6, expected = 6
Test player 0 with 5 treasure card(s) and 7 bonus.
G.coins = 12, expected = 12
G.coins = 17, expected = 17
G.coins = 22, expected = 22
G.coins = 7, expected = 7
Test player 0 with 5 treasure card(s) and 8 bonus.
G.coins = 13, expected = 13
G.coins = 18, expected = 18
G.coins = 23, expected = 23
G.coins = 8, expected = 8
Test player 0 with 5 treasure card(s) and 9 bonus.
G.coins = 14, expected = 14
G.coins = 19, expected = 19
G.coins = 24, expected = 24
G.coins = 9, expected = 9
Test player 0 with 5 treasure card(s) and 10 bonus.
G.coins = 15, expected = 15
G.coins = 20, expected = 20
G.coins = 25, expected = 25
G.coins = 10, expected = 10
Test player 1 with 1 treasure card(s) and 0 bonus.
G.coins = 1, expected = 1
G.coins = 2, expected = 2
G.coins = 3, expected = 3
G.coins = 0, expected = 0
Test player 1 with 1 treasure card(s) and 1 bonus.
G.coins = 2, expected = 2
G.coins = 3, expected = 3
G.coins = 4, expected = 4
G.coins = 1, expected = 1
Test player 1 with 1 treasure card(s) and 2 bonus.
G.coins = 3, expected = 3
G.coins = 4, expected = 4
G.coins = 5, expected = 5
G.coins = 2, expected = 2
Test player 1 with 1 treasure card(s) and 3 bonus.
G.coins = 4, expected = 4
G.coins = 5, expected = 5
G.coins = 6, expected = 6
G.coins = 3, expected = 3
Test player 1 with 1 treasure card(s) and 4 bonus.
G.coins = 5, expected = 5
G.coins = 6, expected = 6
G.coins = 7, expected = 7
G.coins = 4, expected = 4
Test player 1 with 1 treasure card(s) and 5 bonus.
G.coins = 6, expected = 6
G.coins = 7, expected = 7
G.coins = 8, expected = 8
G.coins = 5, expected = 5
Test player 1 with 1 treasure card(s) and 6 bonus.
G.coins = 7, expected = 7
G.coins = 8, expected = 8
G.coins = 9, expected = 9
G.coins = 6, expected = 6
Test player 1 with 1 treasure card(s) and 7 bonus.
G.coins = 8, expected = 8
G.coins = 9, expected = 9
G.coins = 10, expected = 10
G.coins = 7, expected = 7
Test player 1 with 1 treasure card(s) and 8 bonus.
G.coins = 9, expected = 9
G.coins = 10, expected = 10
G.coins = 11, expected = 11
G.coins = 8, expected = 8
Test player 1 with 1 treasure card(s) and 9 bonus.
G.coins = 10, expected = 10
G.coins = 11, expected = 11
G.coins = 12, expected = 12
G.coins = 9, expected = 9
Test player 1 with 1 treasure card(s) and 10 bonus.
G.coins = 11, expected = 11
G.coins = 12, expected = 12
G.coins = 13, expected = 13
G.coins = 10, expected = 10
Test player 1 with 2 treasure card(s) and 0 bonus.
G.coins = 2, expected = 2
G.coins = 4, expected = 4
G.coins = 6, expected = 6
G.coins = 0, expected = 0
Test player 1 with 2 treasure card(s) and 1 bonus.
G.coins = 3, expected = 3
G.coins = 5, expected = 5
G.coins = 7, expected = 7
G.coins = 1, expected = 1
Test player 1 with 2 treasure card(s) and 2 bonus.
G.coins = 4, expected = 4
G.coins = 6, expected = 6
G.coins = 8, expected = 8
G.coins = 2, expected = 2
Test player 1 with 2 treasure card(s) and 3 bonus.
G.coins = 5, expected = 5
G.coins = 7, expected = 7
G.coins = 9, expected = 9
G.coins = 3, expected = 3
Test player 1 with 2 treasure card(s) and 4 bonus.
G.coins = 6, expected = 6
G.coins = 8, expected = 8
G.coins = 10, expected = 10
G.coins = 4, expected = 4
Test player 1 with 2 treasure card(s) and 5 bonus.
G.coins = 7, expected = 7
G.coins = 9, expected = 9
G.coins = 11, expected = 11
G.coins = 5, expected = 5
Test player 1 with 2 treasure card(s) and 6 bonus.
G.coins = 8, expected = 8
G.coins = 10, expected = 10
G.coins = 12, expected = 12
G.coins = 6, expected = 6
Test player 1 with 2 treasure card(s) and 7 bonus.
G.coins = 9, expected = 9
G.coins = 11, expected = 11
G.coins = 13, expected = 13
G.coins = 7, expected = 7
Test player 1 with 2 treasure card(s) and 8 bonus.
G.coins = 10, expected = 10
G.coins = 12, expected = 12
G.coins = 14, expected = 14
G.coins = 8, expected = 8
Test player 1 with 2 treasure card(s) and 9 bonus.
G.coins = 11, expected = 11
G.coins = 13, expected = 13
G.coins = 15, expected = 15
G.coins = 9, expected = 9
Test player 1 with 2 treasure card(s) and 10 bonus.
G.coins = 12, expected = 12
G.coins = 14, expected = 14
G.coins = 16, expected = 16
G.coins = 10, expected = 10
Test player 1 with 3 treasure card(s) and 0 bonus.
G.coins = 3, expected = 3
G.coins = 6, expected = 6
G.coins = 9, expected = 9
G.coins = 0, expected = 0
Test player 1 with 3 treasure card(s) and 1 bonus.
G.coins = 4, expected = 4
G.coins = 7, expected = 7
G.coins = 10, expected = 10
G.coins = 1, expected = 1
Test player 1 with 3 treasure card(s) and 2 bonus.
G.coins = 5, expected = 5
G.coins = 8, expected = 8
G.coins = 11, expected = 11
G.coins = 2, expected = 2
Test player 1 with 3 treasure card(s) and 3 bonus.
G.coins = 6, expected = 6
G.coins = 9, expected = 9
G.coins = 12, expected = 12
G.coins = 3, expected = 3
Test player 1 with 3 treasure card(s) and 4 bonus.
G.coins = 7, expected = 7
G.coins = 10, expected = 10
G.coins = 13, expected = 13
G.coins = 4, expected = 4
Test player 1 with 3 treasure card(s) and 5 bonus.
G.coins = 8, expected = 8
G.coins = 11, expected = 11
G.coins = 14, expected = 14
G.coins = 5, expected = 5
Test player 1 with 3 treasure card(s) and 6 bonus.
G.coins = 9, expected = 9
G.coins = 12, expected = 12
G.coins = 15, expected = 15
G.coins = 6, expected = 6
Test player 1 with 3 treasure card(s) and 7 bonus.
G.coins = 10, expected = 10
G.coins = 13, expected = 13
G.coins = 16, expected = 16
G.coins = 7, expected = 7
Test player 1 with 3 treasure card(s) and 8 bonus.
G.coins = 11, expected = 11
G.coins = 14, expected = 14
G.coins = 17, expected = 17
G.coins = 8, expected = 8
Test player 1 with 3 treasure card(s) and 9 bonus.
G.coins = 12, expected = 12
G.coins = 15, expected = 15
G.coins = 18, expected = 18
G.coins = 9, expected = 9
Test player 1 with 3 treasure card(s) and 10 bonus.
G.coins = 13, expected = 13
G.coins = 16, expected = 16
G.coins = 19, expected = 19
G.coins = 10, expected = 10
Test player 1 with 4 treasure card(s) and 0 bonus.
G.coins = 4, expected = 4
G.coins = 8, expected = 8
G.coins = 12, expected = 12
G.coins = 0, expected = 0
Test player 1 with 4 treasure card(s) and 1 bonus.
G.coins = 5, expected = 5
G.coins = 9, expected = 9
G.coins = 13, expected = 13
G.coins = 1, expected = 1
Test player 1 with 4 treasure card(s) and 2 bonus.
G.coins = 6, expected = 6
G.coins = 10, expected = 10
G.coins = 14, expected = 14
G.coins = 2, expected = 2
Test player 1 with 4 treasure card(s) and 3 bonus.
G.coins = 7, expected = 7
G.coins = 11, expected = 11
G.coins = 15, expected = 15
G.coins = 3, expected = 3
Test player 1 with 4 treasure card(s) and 4 bonus.
G.coins = 8, expected = 8
G.coins = 12, expected = 12
G.coins = 16, expected = 16
G.coins = 4, expected = 4
Test player 1 with 4 treasure card(s) and 5 bonus.
G.coins = 9, expected = 9
G.coins = 13, expected = 13
G.coins = 17, expected = 17
G.coins = 5, expected = 5
Test player 1 with 4 treasure card(s) and 6 bonus.
G.coins = 10, expected = 10
G.coins = 14, expected = 14
G.coins = 18, expected = 18
G.coins = 6, expected = 6
Test player 1 with 4 treasure card(s) and 7 bonus.
G.coins = 11, expected = 11
G.coins = 15, expected = 15
G.coins = 19, expected = 19
G.coins = 7, expected = 7
Test player 1 with 4 treasure card(s) and 8 bonus.
G.coins = 12, expected = 12
G.coins = 16, expected = 16
G.coins = 20, expected = 20
G.coins = 8, expected = 8
Test player 1 with 4 treasure card(s) and 9 bonus.
G.coins = 13, expected = 13
G.coins = 17, expected = 17
G.coins = 21, expected = 21
G.coins = 9, expected = 9
Test player 1 with 4 treasure card(s) and 10 bonus.
G.coins = 14, expected = 14
G.coins = 18, expected = 18
G.coins = 22, expected = 22
G.coins = 10, expected = 10
Test player 1 with 5 treasure card(s) and 0 bonus.
G.coins = 5, expected = 5
G.coins = 10, expected = 10
G.coins = 15, expected = 15
G.coins = 0, expected = 0
Test player 1 with 5 treasure card(s) and 1 bonus.
G.coins = 6, expected = 6
G.coins = 11, expected = 11
G.coins = 16, expected = 16
G.coins = 1, expected = 1
Test player 1 with 5 treasure card(s) and 2 bonus.
G.coins = 7, expected = 7
G.coins = 12, expected = 12
G.coins = 17, expected = 17
G.coins = 2, expected = 2
Test player 1 with 5 treasure card(s) and 3 bonus.
G.coins = 8, expected = 8
G.coins = 13, expected = 13
G.coins = 18, expected = 18
G.coins = 3, expected = 3
Test player 1 with 5 treasure card(s) and 4 bonus.
G.coins = 9, expected = 9
G.coins = 14, expected = 14
G.coins = 19, expected = 19
G.coins = 4, expected = 4
Test player 1 with 5 treasure card(s) and 5 bonus.
G.coins = 10, expected = 10
G.coins = 15, expected = 15
G.coins = 20, expected = 20
G.coins = 5, expected = 5
Test player 1 with 5 treasure card(s) and 6 bonus.
G.coins = 11, expected = 11
G.coins = 16, expected = 16
G.coins = 21, expected = 21
G.coins = 6, expected = 6
Test player 1 with 5 treasure card(s) and 7 bonus.
G.coins = 12, expected = 12
G.coins = 17, expected = 17
G.coins = 22, expected = 22
G.coins = 7, expected = 7
Test player 1 with 5 treasure card(s) and 8 bonus.
G.coins = 13, expected = 13
G.coins = 18, expected = 18
G.coins = 23, expected = 23
G.coins = 8, expected = 8
Test player 1 with 5 treasure card(s) and 9 bonus.
G.coins = 14, expected = 14
G.coins = 19, expected = 19
G.coins = 24, expected = 24
G.coins = 9, expected = 9
Test player 1 with 5 treasure card(s) and 10 bonus.
G.coins = 15, expected = 15
G.coins = 20, expected = 20
G.coins = 25, expected = 25
G.coins = 10, expected = 10
All tests passed!
TESTING buyCard():
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, card added to discard.
buyCard() test: PASS, card cost subtracted from coins sucessfully.
buyCard() test: PASS, numBuys decreased by 1.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
buyCard() test: PASS, function returned -1 as expected and no state change occurred.
All tests passed!
TESTING discardCard():
discardCard() test: PASS, playedCards pile has increased by one.
discardCard() test: PASS, discarded card is on top of played cards pile.
discardCard() test: PASS, player's handcount has been reduced by one.
discardCard() test: PASS, playedCards pile has increased by one.
discardCard() test: PASS, discarded card is on top of played cards pile.
discardCard() test: PASS, player's handcount has been reduced by one.
discardCard() test: PASS, playedCards pile has increased by one.
discardCard() test: PASS, discarded card is on top of played cards pile.
discardCard() test: PASS, player's handcount has been reduced by one.
discardCard() test: PASS, player's handcount has been reduced by one.
discardCard() test: PASS, player's handcount has been reduced by one.
discardCard() test: PASS, player's handcount has been reduced by one.
discardCard(): All tests passed!
----------------- Testing Card: Smithy ----------------
hand count = 8, expected = 7
smithy cardEffect() test: FAIL, hand count does not match expected value.
deck count = 1, expected = 2
smithy cardEffect() test: FAIL, player's deck count does not match expected value.
smithy cardEffect() test: PASS, a card was added to played cards.
smithy cardEffect() test: PASS, card played was smithy.
smithy cardEffect() test: PASS, supply count of all cards has remained the same.
smithy cardEffect() test: PASS, cardEffect() returned 0.
smithy cardEffect(): All tests complete with failure(s)!
----------------- Testing Card: Adventurer ----------------
Current hand (5 cards): 7 4 1 4 4
hand count = 7, expected = 6
adventurer cardEffect() test: FAIL, hand count does not match expected value.
adventurer cardEffect() test: FAIL, a card was not added to played cards.
Current hand (7 cards): 7 4 1 4 4 4 4
adventurer cardEffect() test: PASS, first drawn card is a treasure card.
adventurer cardEffect() test: PASS, second drawn card is a treasure card.
adventurer cardEffect() test: PASS, supply count of all cards has remained the same.
adventurer cardEffect() test: PASS, cardEffect() returned 0.
adventurer cardEffect(): All tests complete with failure(s)!
----------------- Testing Card: Village ----------------
hand count = 5, expected = 5
village cardEffect() test: PASS, player has gained one card minus the expected played Village.
village cardEffect() test: PASS, a card was added to played cards.
village cardEffect() test: PASS, card played was village.
action count = 4, expected = 3
village cardEffect() test: FAIL, action count does not match expected value.
village cardEffect() test: PASS, supply count of all cards has remained the same.
village cardEffect() test: PASS, cardEffect() returned 0.
All tests complete with failure(s)!
----------------- Testing Card: Great Hall ----------------
Current player: 0
hand count = 6, expected = 5
great_hall cardEffect() test: FAIL, hand count does not match expected value.
action count = 2, expected = 2
great_hall cardEffect() test: FAIL, action count does not match expected value.
vp count = 2, expected = 2
great_hall cardEffect() test: PASS, player has gained one victory point.
great_hall cardEffect() test: PASS, supply count of all cards has remained the same.
great_hall cardEffect() test: PASS, cardEffect() returned 0.
Great Hall card test: All tests complete with failure(s)!
Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:100.00% of 13
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'discardCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'runEmbargo'
Lines executed:0.00% of 7
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
Calls executed:0.00% of 1

Function 'runGreat_hall'
Lines executed:100.00% of 4
No branches
Calls executed:100.00% of 1

Function 'runVillage'
Lines executed:100.00% of 5
No branches
Calls executed:100.00% of 2

Function 'runAdventurer'
Lines executed:100.00% of 15
Branches executed:100.00% of 10
Taken at least once:100.00% of 10
Calls executed:100.00% of 2

Function 'runSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 2

Function 'cardEffect'
Lines executed:8.94% of 235
Branches executed:12.57% of 183
Taken at least once:3.28% of 183
Calls executed:8.33% of 60

Function 'getCost'
Lines executed:73.68% of 57
Branches executed:100.00% of 28
Taken at least once:71.43% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:33.33% of 42
Branches executed:42.86% of 42
Taken at least once:28.57% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 12
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'supplyCount'
Lines executed:100.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:92.31% of 13
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
Calls executed:100.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

File 'dominion.c'
Lines executed:40.25% of 631
Branches executed:40.72% of 415
Taken at least once:31.08% of 415
Calls executed:26.60% of 94
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:22
        -:    0:Programs:22
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 1624270 returned 100% blocks executed 100%
  1624270:    8:int compare(const void *a, const void *b)
        -:    9:{
  1624270:   10:  if (*(int *)a > *(int *)b)
branch  0 taken 49% (fallthrough)
branch  1 taken 51%
   802564:   11:    return 1;
   821706:   12:  if (*(int *)a < *(int *)b)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
   368192:   13:    return -1;
   453514:   14:  return 0;
        -:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
    #####:   17:struct gameState *newGame()
        -:   18:{
    #####:   19:  struct gameState *g = malloc(sizeof(struct gameState));
    #####:   20:  return g;
        -:   21:}
        -:   22:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   23:int *kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   24:                  int k8, int k9, int k10)
        -:   25:{
    #####:   26:  int *k = malloc(10 * sizeof(int));
    #####:   27:  k[0] = k1;
    #####:   28:  k[1] = k2;
    #####:   29:  k[2] = k3;
    #####:   30:  k[3] = k4;
    #####:   31:  k[4] = k5;
    #####:   32:  k[5] = k6;
    #####:   33:  k[6] = k7;
    #####:   34:  k[7] = k8;
    #####:   35:  k[8] = k9;
    #####:   36:  k[9] = k10;
    #####:   37:  return k;
        -:   38:}
        -:   39:
function initializeGame called 758 returned 100% blocks executed 88%
      758:   40:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   41:                   struct gameState *state)
        -:   42:{
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;
        -:   47:  //set up random number generator
      758:   48:  SelectStream(1);
call    0 returned 100%
      758:   49:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   50:
        -:   51:  //check number of players
      758:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   53:  {
    #####:   54:    return -1;
        -:   55:  }
        -:   56:
        -:   57:  //set number of players
      758:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
     8338:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   62:  {
    83380:   63:    for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   64:    {
    75800:   65:      if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   66:      {
    #####:   67:        return -1;
        -:   68:      }
        -:   69:    }
        -:   70:  }
        -:   71:
        -:   72:  //initialize supply
        -:   73:  ///////////////////////////////
        -:   74:
        -:   75:  //set number of Curse cards
      758:   76:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   77:  {
      758:   78:    state->supplyCount[curse] = 10;
        -:   79:  }
    #####:   80:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   81:  {
    #####:   82:    state->supplyCount[curse] = 20;
        -:   83:  }
        -:   84:  else
        -:   85:  {
    #####:   86:    state->supplyCount[curse] = 30;
        -:   87:  }
        -:   88:
        -:   89:  //set number of Victory cards
      758:   90:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   91:  {
      758:   92:    state->supplyCount[estate] = 8;
      758:   93:    state->supplyCount[duchy] = 8;
      758:   94:    state->supplyCount[province] = 8;
        -:   95:  }
        -:   96:  else
        -:   97:  {
    #####:   98:    state->supplyCount[estate] = 12;
    #####:   99:    state->supplyCount[duchy] = 12;
    #####:  100:    state->supplyCount[province] = 12;
        -:  101:  }
        -:  102:
        -:  103:  //set number of Treasure cards
      758:  104:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      758:  105:  state->supplyCount[silver] = 40;
      758:  106:  state->supplyCount[gold] = 30;
        -:  107:
        -:  108:  //set number of Kingdom cards
    15918:  109:  for (i = adventurer; i <= treasure_map; i++) //loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  110:  {
   125070:  111:    for (j = 0; j < 10; j++) //loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  112:    {
   117490:  113:      if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  114:      {
        -:  115:        //check if card is a 'Victory' Kingdom card
     7580:  116:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  117:        {
     3000:  118:          if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  119:          {
     1500:  120:            state->supplyCount[i] = 8;
        -:  121:          }
        -:  122:          else
        -:  123:          {
    #####:  124:            state->supplyCount[i] = 12;
        -:  125:          }
        -:  126:        }
        -:  127:        else
        -:  128:        {
     6080:  129:          state->supplyCount[i] = 10;
        -:  130:        }
     7580:  131:        break;
        -:  132:      }
        -:  133:      else //card is not in the set choosen for the game
        -:  134:      {
   109910:  135:        state->supplyCount[i] = -1;
        -:  136:      }
        -:  137:    }
        -:  138:  }
        -:  139:
        -:  140:  ////////////////////////
        -:  141:  //supply intilization complete
        -:  142:
        -:  143:  //set player decks
     2274:  144:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  145:  {
     1516:  146:    state->deckCount[i] = 0;
     6064:  147:    for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  148:    {
     4548:  149:      state->deck[i][j] = estate;
     4548:  150:      state->deckCount[i]++;
        -:  151:    }
    12128:  152:    for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  153:    {
    10612:  154:      state->deck[i][j] = copper;
    10612:  155:      state->deckCount[i]++;
        -:  156:    }
        -:  157:  }
        -:  158:
        -:  159:  //shuffle player decks
     2274:  160:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  161:  {
     1516:  162:    if (shuffle(i, state) < 0)
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  163:    {
    #####:  164:      return -1;
        -:  165:    }
        -:  166:  }
        -:  167:
        -:  168:  //draw player hands
     2274:  169:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  170:  {
        -:  171:    //initialize hand size to zero
     1516:  172:    state->handCount[i] = 0;
     1516:  173:    state->discardCount[i] = 0;
        -:  174:    //draw 5 cards
        -:  175:    // for (j = 0; j < 5; j++)
        -:  176:    //	{
        -:  177:    //	  drawCard(i, state);
        -:  178:    //	}
        -:  179:  }
        -:  180:
        -:  181:  //set embargo tokens to 0 for all supply piles
    21224:  182:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  183:  {
    20466:  184:    state->embargoTokens[i] = 0;
        -:  185:  }
        -:  186:
        -:  187:  //initialize first player's turn
      758:  188:  state->outpostPlayed = 0;
      758:  189:  state->phase = 0;
      758:  190:  state->numActions = 1;
      758:  191:  state->numBuys = 1;
      758:  192:  state->playedCardCount = 0;
      758:  193:  state->whoseTurn = 0;
      758:  194:  state->handCount[state->whoseTurn] = 0;
        -:  195:  //int it; move to top
        -:  196:
        -:  197:  //Moved draw cards to here, only drawing at the start of a turn
     4548:  198:  for (it = 0; it < 5; it++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  199:  {
     3790:  200:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  201:  }
        -:  202:
      758:  203:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  204:
      758:  205:  return 0;
        -:  206:}
        -:  207:
function shuffle called 3622 returned 100% blocks executed 100%
     3622:  208:int shuffle(int player, struct gameState *state)
        -:  209:{
        -:  210:
        -:  211:  int newDeck[MAX_DECK];
     3622:  212:  int newDeckPos = 0;
        -:  213:  int card;
        -:  214:  int i;
        -:  215:
     3622:  216:  if (state->deckCount[player] < 1)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
     1190:  217:    return -1;
     2432:  218:  qsort((void *)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
call    0 returned 100%
        -:  219:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  220:
   249858:  221:  while (state->deckCount[player] > 0)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  222:  {
   244994:  223:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   244994:  224:    newDeck[newDeckPos] = state->deck[player][card];
   244994:  225:    newDeckPos++;
 19378998:  226:    for (i = card; i < state->deckCount[player] - 1; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  227:    {
 19134004:  228:      state->deck[player][i] = state->deck[player][i + 1];
        -:  229:    }
   244994:  230:    state->deckCount[player]--;
        -:  231:  }
   247426:  232:  for (i = 0; i < newDeckPos; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  233:  {
   244994:  234:    state->deck[player][i] = newDeck[i];
   244994:  235:    state->deckCount[player]++;
        -:  236:  }
        -:  237:
     2432:  238:  return 0;
        -:  239:}
        -:  240:
function playCard called 0 returned 0% blocks executed 0%
    #####:  241:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  242:{
        -:  243:  int card;
    #####:  244:  int coin_bonus = 0; //tracks coins gain from actions
        -:  245:
        -:  246:  //check if it is the right phase
    #####:  247:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  248:  {
    #####:  249:    return -1;
        -:  250:  }
        -:  251:
        -:  252:  //check if player has enough actions
    #####:  253:  if (state->numActions < 1)
branch  0 never executed
branch  1 never executed
        -:  254:  {
    #####:  255:    return -1;
        -:  256:  }
        -:  257:
        -:  258:  //get card played
    #####:  259:  card = handCard(handPos, state);
call    0 never executed
        -:  260:
        -:  261:  //check if selected card is an action
    #####:  262:  if (card < adventurer || card > treasure_map)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  263:  {
    #####:  264:    return -1;
        -:  265:  }
        -:  266:
        -:  267:  //play card
    #####:  268:  if (cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  269:  {
    #####:  270:    return -1;
        -:  271:  }
        -:  272:
        -:  273:  //reduce number of actions
    #####:  274:  state->numActions--;
        -:  275:
        -:  276:  //update coins (Treasure cards may be added with card draws)
    #####:  277:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  278:
    #####:  279:  return 0;
        -:  280:}
        -:  281:
function buyCard called 520 returned 100% blocks executed 93%
      520:  282:int buyCard(int supplyPos, struct gameState *state)
        -:  283:{
        -:  284:  int who;
        -:  285:  if (DEBUG)
        -:  286:  {
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
      520:  292:  who = state->whoseTurn;
        -:  293:
      520:  294:  if (state->numBuys < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  295:  {
        -:  296:    if (DEBUG)
        -:  297:      printf("You do not have any buys left\n");
    #####:  298:    return -1;
        -:  299:  }
      520:  300:  else if (supplyCount(supplyPos, state) < 1)
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  301:  {
        -:  302:    if (DEBUG)
        -:  303:      printf("There are not any of that type of card left\n");
      260:  304:    return -1;
        -:  305:  }
      260:  306:  else if (state->coins < getCost(supplyPos))
call    0 returned 100%
branch  1 taken 32% (fallthrough)
branch  2 taken 68%
        -:  307:  {
        -:  308:    if (DEBUG)
        -:  309:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
       84:  310:    return -1;
        -:  311:  }
        -:  312:  else
        -:  313:  {
      176:  314:    state->phase = 1;
        -:  315:    //state->supplyCount[supplyPos]--;
      176:  316:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  317:
      176:  318:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
      176:  319:    state->numBuys--;
        -:  320:    if (DEBUG)
        -:  321:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  322:  }
        -:  323:
        -:  324:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  325:  //state->discardCount[who]++;
        -:  326:
      176:  327:  return 0;
        -:  328:}
        -:  329:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  330:int numHandCards(struct gameState *state)
        -:  331:{
    #####:  332:  return state->handCount[whoseTurn(state)];
call    0 never executed
        -:  333:}
        -:  334:
function handCard called 0 returned 0% blocks executed 0%
    #####:  335:int handCard(int handPos, struct gameState *state)
        -:  336:{
    #####:  337:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  338:  return state->hand[currentPlayer][handPos];
        -:  339:}
        -:  340:
function supplyCount called 936 returned 100% blocks executed 100%
      936:  341:int supplyCount(int card, struct gameState *state)
        -:  342:{
      936:  343:  return state->supplyCount[card];
        -:  344:}
        -:  345:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  346:int fullDeckCount(int player, int card, struct gameState *state)
        -:  347:{
        -:  348:  int i;
    #####:  349:  int count = 0;
        -:  350:
    #####:  351:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  352:  {
    #####:  353:    if (state->deck[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  354:      count++;
        -:  355:  }
        -:  356:
    #####:  357:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  358:  {
    #####:  359:    if (state->hand[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  360:      count++;
        -:  361:  }
        -:  362:
    #####:  363:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  364:  {
    #####:  365:    if (state->discard[player][i] == card)
branch  0 never executed
branch  1 never executed
    #####:  366:      count++;
        -:  367:  }
        -:  368:
    #####:  369:  return count;
        -:  370:}
        -:  371:
function whoseTurn called 12010 returned 100% blocks executed 100%
    12010:  372:int whoseTurn(struct gameState *state)
        -:  373:{
    12010:  374:  return state->whoseTurn;
        -:  375:}
        -:  376:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  377:int endTurn(struct gameState *state)
        -:  378:{
        -:  379:  int k;
        -:  380:  int i;
    #####:  381:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  382:
        -:  383:  //Discard hand
    #####:  384:  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  385:  {
    #####:  386:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i]; //Discard
    #####:  387:    state->hand[currentPlayer][i] = -1;                                                                  //Set card to -1
        -:  388:  }
    #####:  389:  state->handCount[currentPlayer] = 0; //Reset hand count
        -:  390:
        -:  391:  //Code for determining the player
    #####:  392:  if (currentPlayer < (state->numPlayers - 1))
branch  0 never executed
branch  1 never executed
        -:  393:  {
    #####:  394:    state->whoseTurn = currentPlayer + 1; //Still safe to increment
        -:  395:  }
        -:  396:  else
        -:  397:  {
    #####:  398:    state->whoseTurn = 0; //Max player has been reached, loop back around to player 1
        -:  399:  }
        -:  400:
    #####:  401:  state->outpostPlayed = 0;
    #####:  402:  state->phase = 0;
    #####:  403:  state->numActions = 1;
    #####:  404:  state->coins = 0;
    #####:  405:  state->numBuys = 1;
    #####:  406:  state->playedCardCount = 0;
    #####:  407:  state->handCount[state->whoseTurn] = 0;
        -:  408:
        -:  409:  //int k; move to top
        -:  410:  //Next player draws hand
    #####:  411:  for (k = 0; k < 5; k++)
branch  0 never executed
branch  1 never executed
        -:  412:  {
    #####:  413:    drawCard(state->whoseTurn, state); //Draw a card
call    0 never executed
        -:  414:  }
        -:  415:
        -:  416:  //Update money
    #####:  417:  updateCoins(state->whoseTurn, state, 0);
call    0 never executed
        -:  418:
    #####:  419:  return 0;
        -:  420:}
        -:  421:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  422:int isGameOver(struct gameState *state)
        -:  423:{
        -:  424:  int i;
        -:  425:  int j;
        -:  426:
        -:  427:  //if stack of Province cards is empty, the game ends
    #####:  428:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  429:  {
    #####:  430:    return 1;
        -:  431:  }
        -:  432:
        -:  433:  //if three supply pile are at 0, the game ends
    #####:  434:  j = 0;
    #####:  435:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  436:  {
    #####:  437:    if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  438:    {
    #####:  439:      j++;
        -:  440:    }
        -:  441:  }
    #####:  442:  if (j >= 3)
branch  0 never executed
branch  1 never executed
        -:  443:  {
    #####:  444:    return 1;
        -:  445:  }
        -:  446:
    #####:  447:  return 0;
        -:  448:}
        -:  449:
function scoreFor called 4 returned 100% blocks executed 34%
        4:  450:int scoreFor(int player, struct gameState *state)
        -:  451:{
        -:  452:
        -:  453:  int i;
        4:  454:  int score = 0;
        -:  455:  //score from hand
       24:  456:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  457:  {
       20:  458:    if (state->hand[player][i] == curse)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  459:    {
    #####:  460:      score = score - 1;
        -:  461:    };
       20:  462:    if (state->hand[player][i] == estate)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  463:    {
        4:  464:      score = score + 1;
        -:  465:    };
       20:  466:    if (state->hand[player][i] == duchy)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  467:    {
    #####:  468:      score = score + 3;
        -:  469:    };
       20:  470:    if (state->hand[player][i] == province)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  471:    {
    #####:  472:      score = score + 6;
        -:  473:    };
       20:  474:    if (state->hand[player][i] == great_hall)
branch  0 taken 10% (fallthrough)
branch  1 taken 90%
        -:  475:    {
        2:  476:      score = score + 1;
        -:  477:    };
       20:  478:    if (state->hand[player][i] == gardens)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  479:    {
    #####:  480:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  481:    };
        -:  482:  }
        -:  483:
        -:  484:  //score from discard
        4:  485:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  486:  {
    #####:  487:    if (state->discard[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  488:    {
    #####:  489:      score = score - 1;
        -:  490:    };
    #####:  491:    if (state->discard[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      score = score + 1;
        -:  494:    };
    #####:  495:    if (state->discard[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  496:    {
    #####:  497:      score = score + 3;
        -:  498:    };
    #####:  499:    if (state->discard[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  500:    {
    #####:  501:      score = score + 6;
        -:  502:    };
    #####:  503:    if (state->discard[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      score = score + 1;
        -:  506:    };
    #####:  507:    if (state->discard[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  508:    {
    #####:  509:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  510:    };
        -:  511:  }
        -:  512:
        -:  513:  //score from deck
        4:  514:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
        -:  515:  {
    #####:  516:    if (state->deck[player][i] == curse)
branch  0 never executed
branch  1 never executed
        -:  517:    {
    #####:  518:      score = score - 1;
        -:  519:    };
    #####:  520:    if (state->deck[player][i] == estate)
branch  0 never executed
branch  1 never executed
        -:  521:    {
    #####:  522:      score = score + 1;
        -:  523:    };
    #####:  524:    if (state->deck[player][i] == duchy)
branch  0 never executed
branch  1 never executed
        -:  525:    {
    #####:  526:      score = score + 3;
        -:  527:    };
    #####:  528:    if (state->deck[player][i] == province)
branch  0 never executed
branch  1 never executed
        -:  529:    {
    #####:  530:      score = score + 6;
        -:  531:    };
    #####:  532:    if (state->deck[player][i] == great_hall)
branch  0 never executed
branch  1 never executed
        -:  533:    {
    #####:  534:      score = score + 1;
        -:  535:    };
    #####:  536:    if (state->deck[player][i] == gardens)
branch  0 never executed
branch  1 never executed
        -:  537:    {
    #####:  538:      score = score + (fullDeckCount(player, 0, state) / 10);
call    0 never executed
        -:  539:    };
        -:  540:  }
        -:  541:
        4:  542:  return score;
        -:  543:}
        -:  544:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  545:int getWinners(int players[MAX_PLAYERS], struct gameState *state)
        -:  546:{
        -:  547:  int i;
        -:  548:  int j;
        -:  549:  int highScore;
        -:  550:  int currentPlayer;
        -:  551:
        -:  552:  //get score for each player
    #####:  553:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  554:  {
        -:  555:    //set unused player scores to -9999
    #####:  556:    if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  557:    {
    #####:  558:      players[i] = -9999;
        -:  559:    }
        -:  560:    else
        -:  561:    {
    #####:  562:      players[i] = scoreFor(i, state);
call    0 never executed
        -:  563:    }
        -:  564:  }
        -:  565:
        -:  566:  //find highest score
    #####:  567:  j = 0;
    #####:  568:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  569:  {
    #####:  570:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  571:    {
    #####:  572:      j = i;
        -:  573:    }
        -:  574:  }
    #####:  575:  highScore = players[j];
        -:  576:
        -:  577:  //add 1 to players who had less turns
    #####:  578:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  579:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  580:  {
    #####:  581:    if (players[i] == highScore && i > currentPlayer)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  582:    {
    #####:  583:      players[i]++;
        -:  584:    }
        -:  585:  }
        -:  586:
        -:  587:  //find new highest score
    #####:  588:  j = 0;
    #####:  589:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  590:  {
    #####:  591:    if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  592:    {
    #####:  593:      j = i;
        -:  594:    }
        -:  595:  }
    #####:  596:  highScore = players[j];
        -:  597:
        -:  598:  //set winners in array to 1 and rest to 0
    #####:  599:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:  {
    #####:  601:    if (players[i] == highScore)
branch  0 never executed
branch  1 never executed
        -:  602:    {
    #####:  603:      players[i] = 1;
        -:  604:    }
        -:  605:    else
        -:  606:    {
    #####:  607:      players[i] = 0;
        -:  608:    }
        -:  609:  }
        -:  610:
    #####:  611:  return 0;
        -:  612:}
        -:  613:
function drawCard called 1618298 returned 100% blocks executed 100%
  1618298:  614:int drawCard(int player, struct gameState *state)
        -:  615:{
        -:  616:  int count;
        -:  617:  int deckCounter;
  1618298:  618:  if (state->deckCount[player] <= 0)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  619:  { //Deck is empty
        -:  620:
        -:  621:    //Step 1 Shuffle the discard pile back into a deck
        -:  622:    int i;
        -:  623:    //Move discard to deck
   230962:  624:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  625:    {
   229834:  626:      state->deck[player][i] = state->discard[player][i];
   229834:  627:      state->discard[player][i] = -1;
        -:  628:    }
        -:  629:
     1128:  630:    state->deckCount[player] = state->discardCount[player];
     1128:  631:    state->discardCount[player] = 0; //Reset discard
        -:  632:
        -:  633:    //Shufffle the deck
     1128:  634:    shuffle(player, state); //Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  635:
        -:  636:    if (DEBUG)
        -:  637:    { //Debug statements
        -:  638:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  639:    }
        -:  640:
     1128:  641:    state->discardCount[player] = 0;
        -:  642:
        -:  643:    //Step 2 Draw Card
     1128:  644:    count = state->handCount[player]; //Get current player's hand count
        -:  645:
        -:  646:    if (DEBUG)
        -:  647:    { //Debug statements
        -:  648:      printf("Current hand count: %d\n", count);
        -:  649:    }
        -:  650:
     1128:  651:    deckCounter = state->deckCount[player]; //Create a holder for the deck count
        -:  652:
     1128:  653:    if (deckCounter == 0)
branch  0 taken 19% (fallthrough)
branch  1 taken 81%
      212:  654:      return -1;
        -:  655:
      916:  656:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to hand
      916:  657:    state->deckCount[player]--;
      916:  658:    state->handCount[player]++; //Increment hand count
        -:  659:  }
        -:  660:
        -:  661:  else
        -:  662:  {
  1617170:  663:    int count = state->handCount[player]; //Get current hand count for player
        -:  664:    int deckCounter;
        -:  665:    if (DEBUG)
        -:  666:    { //Debug statements
        -:  667:      printf("Current hand count: %d\n", count);
        -:  668:    }
        -:  669:
  1617170:  670:    deckCounter = state->deckCount[player];                            //Create holder for the deck count
  1617170:  671:    state->hand[player][count] = state->deck[player][deckCounter - 1]; //Add card to the hand
  1617170:  672:    state->deckCount[player]--;
  1617170:  673:    state->handCount[player]++; //Increment hand count
        -:  674:  }
        -:  675:
  1618086:  676:  return 0;
        -:  677:}
        -:  678:
function getCost called 956 returned 100% blocks executed 73%
      956:  679:int getCost(int cardNumber)
        -:  680:{
      956:  681:  switch (cardNumber)
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 7%
branch  8 taken 7%
branch  9 taken 7%
branch 10 taken 7%
branch 11 taken 7%
branch 12 taken 7%
branch 13 taken 7%
branch 14 taken 8%
branch 15 taken 7%
branch 16 taken 8%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 3%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 0%
        -:  682:  {
    #####:  683:  case curse:
    #####:  684:    return 0;
    #####:  685:  case estate:
    #####:  686:    return 2;
    #####:  687:  case duchy:
    #####:  688:    return 5;
    #####:  689:  case province:
    #####:  690:    return 8;
    #####:  691:  case copper:
    #####:  692:    return 0;
    #####:  693:  case silver:
    #####:  694:    return 3;
    #####:  695:  case gold:
    #####:  696:    return 6;
       66:  697:  case adventurer:
       66:  698:    return 6;
       68:  699:  case council_room:
       68:  700:    return 5;
       70:  701:  case feast:
       70:  702:    return 4;
       70:  703:  case gardens:
       70:  704:    return 4;
       68:  705:  case mine:
       68:  706:    return 5;
       70:  707:  case remodel:
       70:  708:    return 4;
       70:  709:  case smithy:
       70:  710:    return 4;
       72:  711:  case village:
       72:  712:    return 3;
       70:  713:  case baron:
       70:  714:    return 4;
       72:  715:  case great_hall:
       72:  716:    return 3;
       26:  717:  case minion:
       26:  718:    return 5;
       26:  719:  case steward:
       26:  720:    return 3;
       26:  721:  case tribute:
       26:  722:    return 5;
       26:  723:  case ambassador:
       26:  724:    return 3;
       26:  725:  case cutpurse:
       26:  726:    return 4;
       26:  727:  case embargo:
       26:  728:    return 2;
       26:  729:  case outpost:
       26:  730:    return 5;
       26:  731:  case salvager:
       26:  732:    return 4;
       26:  733:  case sea_hag:
       26:  734:    return 4;
       26:  735:  case treasure_map:
       26:  736:    return 4;
        -:  737:  }
        -:  738:
    #####:  739:  return -1;
        -:  740:}
        -:  741:
function cardEffect called 12008 returned 100% blocks executed 6%
    12008:  742:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  743:{
        -:  744:  int i;
        -:  745:  int j;
        -:  746:  int k;
        -:  747:  int x;
        -:  748:  int index;
    12008:  749:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    12008:  750:  int nextPlayer = currentPlayer + 1;
        -:  751:
    12008:  752:  int tributeRevealedCards[2] = {-1, -1};
        -:  753:  int temphand[MAX_HAND]; // moved above the if statement
    12008:  754:  int drawntreasure = 0;
        -:  755:  int cardDrawn;
    12008:  756:  int z = 0; // this is the counter for the temp hand
    12008:  757:  if (nextPlayer > (state->numPlayers - 1))
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -:  758:  {
    12000:  759:    nextPlayer = 0;
        -:  760:  }
        -:  761:
        -:  762:  //uses switch to select card and perform actions
    12008:  763:  switch (card)
branch  0 taken 33%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 33%
branch  7 taken 33%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  764:  {
     4002:  765:  case adventurer:
     4002:  766:    runAdventurer(currentPlayer, handPos, state, drawntreasure, temphand, cardDrawn, z);
call    0 returned 100%
     4002:  767:    return 0;
        -:  768:
    #####:  769:  case council_room:
        -:  770:    //+4 Cards
    #####:  771:    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  772:    {
    #####:  773:      drawCard(currentPlayer, state);
call    0 never executed
        -:  774:    }
        -:  775:
        -:  776:    //+1 Buy
    #####:  777:    state->numBuys++;
        -:  778:
        -:  779:    //Each other player draws a card
    #####:  780:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  781:    {
    #####:  782:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  783:      {
    #####:  784:        drawCard(i, state);
call    0 never executed
        -:  785:      }
        -:  786:    }
        -:  787:
        -:  788:    //put played card in played card pile
    #####:  789:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  790:
    #####:  791:    return 0;
        -:  792:
    #####:  793:  case feast:
        -:  794:    //gain card with cost up to 5
        -:  795:    //Backup hand
    #####:  796:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  797:    {
    #####:  798:      temphand[i] = state->hand[currentPlayer][i]; //Backup card
    #####:  799:      state->hand[currentPlayer][i] = -1;          //Set to nothing
        -:  800:    }
        -:  801:    //Backup hand
        -:  802:
        -:  803:    //Update Coins for Buy
    #####:  804:    updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  805:    x = 1; //Condition to loop on
    #####:  806:    while (x == 1)
branch  0 never executed
branch  1 never executed
        -:  807:    { //Buy one card
    #####:  808:      if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  809:      {
        -:  810:        if (DEBUG)
        -:  811:          printf("None of that card left, sorry!\n");
        -:  812:
        -:  813:        if (DEBUG)
        -:  814:        {
        -:  815:          printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  816:        }
        -:  817:      }
    #####:  818:      else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  819:      {
    #####:  820:        printf("That card is too expensive!\n");
call    0 never executed
        -:  821:
        -:  822:        if (DEBUG)
        -:  823:        {
        -:  824:          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  825:        }
        -:  826:      }
        -:  827:      else
        -:  828:      {
        -:  829:
        -:  830:        if (DEBUG)
        -:  831:        {
        -:  832:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  833:        }
        -:  834:
    #####:  835:        gainCard(choice1, state, 0, currentPlayer); //Gain the card
call    0 never executed
    #####:  836:        x = 0;                                      //No more buying cards
        -:  837:
        -:  838:        if (DEBUG)
        -:  839:        {
        -:  840:          printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:        }
        -:  842:      }
        -:  843:    }
        -:  844:
        -:  845:    //Reset Hand
    #####:  846:    for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  847:    {
    #####:  848:      state->hand[currentPlayer][i] = temphand[i];
    #####:  849:      temphand[i] = -1;
        -:  850:    }
        -:  851:    //Reset Hand
        -:  852:
    #####:  853:    return 0;
        -:  854:
    #####:  855:  case gardens:
    #####:  856:    return -1;
        -:  857:
    #####:  858:  case mine:
    #####:  859:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  860:
    #####:  861:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  862:    {
    #####:  863:      return -1;
        -:  864:    }
        -:  865:
    #####:  866:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  867:    {
    #####:  868:      return -1;
        -:  869:    }
        -:  870:
    #####:  871:    if ((getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  872:    {
    #####:  873:      return -1;
        -:  874:    }
        -:  875:
    #####:  876:    gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  877:
        -:  878:    //discard card from hand
    #####:  879:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  880:
        -:  881:    //discard trashed card
    #####:  882:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  883:    {
    #####:  884:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  885:      {
    #####:  886:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  887:        break;
        -:  888:      }
        -:  889:    }
        -:  890:
    #####:  891:    return 0;
        -:  892:
    #####:  893:  case remodel:
    #####:  894:    j = state->hand[currentPlayer][choice1]; //store card we will trash
        -:  895:
    #####:  896:    if ((getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2))
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:    {
    #####:  898:      return -1;
        -:  899:    }
        -:  900:
    #####:  901:    gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  902:
        -:  903:    //discard card from hand
    #####:  904:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  905:
        -:  906:    //discard trashed card
    #####:  907:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  908:    {
    #####:  909:      if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  910:      {
    #####:  911:        discardCard(i, currentPlayer, state, 0);
call    0 never executed
    #####:  912:        break;
        -:  913:      }
        -:  914:    }
        -:  915:
    #####:  916:    return 0;
        -:  917:
     4002:  918:  case smithy:
        -:  919:    
     4002:  920:    runSmithy(currentPlayer, handPos, state);
call    0 returned 100%
        -:  921:
     4002:  922:    return 0;
        -:  923:
     4002:  924:  case village:
     4002:  925:    runVillage(currentPlayer, handPos, state);
call    0 returned 100%
     4002:  926:    return 0;
        -:  927:
    #####:  928:  case baron:
    #####:  929:    state->numBuys++; //Increase buys by 1!
    #####:  930:    if (choice1 > 0)
branch  0 never executed
branch  1 never executed
        -:  931:    {                             //Boolean true or going to discard an estate
    #####:  932:      int p = 0;                  //Iterator for hand!
    #####:  933:      int card_not_discarded = 1; //Flag for discard set!
    #####:  934:      while (card_not_discarded)
branch  0 never executed
branch  1 never executed
        -:  935:      {
    #####:  936:        if (state->hand[currentPlayer][p] == estate)
branch  0 never executed
branch  1 never executed
        -:  937:        {                    //Found an estate card!
    #####:  938:          state->coins += 4; //Add 4 coins to the amount of coins
    #####:  939:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  940:          state->discardCount[currentPlayer]++;
    #####:  941:          for (; p < state->handCount[currentPlayer]; p++)
branch  0 never executed
branch  1 never executed
        -:  942:          {
    #####:  943:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p + 1];
        -:  944:          }
    #####:  945:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  946:          state->handCount[currentPlayer]--;
    #####:  947:          card_not_discarded = 0; //Exit the loop
        -:  948:        }
    #####:  949:        else if (p > state->handCount[currentPlayer])
branch  0 never executed
branch  1 never executed
        -:  950:        {
        -:  951:          if (DEBUG)
        -:  952:          {
        -:  953:            printf("No estate cards in your hand, invalid choice\n");
        -:  954:            printf("Must gain an estate if there are any\n");
        -:  955:          }
    #####:  956:          if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  957:          {
    #####:  958:            gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  959:            state->supplyCount[estate]--; //Decrement estates
    #####:  960:            if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  961:            {
    #####:  962:              isGameOver(state);
call    0 never executed
        -:  963:            }
        -:  964:          }
    #####:  965:          card_not_discarded = 0; //Exit the loop
        -:  966:        }
        -:  967:
        -:  968:        else
        -:  969:        {
    #####:  970:          p++; //Next card
        -:  971:        }
        -:  972:      }
        -:  973:    }
        -:  974:
        -:  975:    else
        -:  976:    {
    #####:  977:      if (supplyCount(estate, state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  978:      {
    #####:  979:        gainCard(estate, state, 0, currentPlayer); //Gain an estate
call    0 never executed
    #####:  980:        state->supplyCount[estate]--;              //Decrement Estates
    #####:  981:        if (supplyCount(estate, state) == 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  982:        {
    #####:  983:          isGameOver(state);
call    0 never executed
        -:  984:        }
        -:  985:      }
        -:  986:    }
        -:  987:
    #####:  988:    return 0;
        -:  989:
        2:  990:  case great_hall:
        2:  991:    runGreat_hall(currentPlayer, handPos, state);
call    0 returned 100%
        2:  992:    return 0;
        -:  993:
    #####:  994:  case minion:
        -:  995:    //+1 action
    #####:  996:    state->numActions++;
        -:  997:
        -:  998:    //discard card from hand
    #####:  999:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1000:
    #####: 1001:    if (choice1) //+2 coins
branch  0 never executed
branch  1 never executed
        -: 1002:    {
    #####: 1003:      state->coins = state->coins + 2;
        -: 1004:    }
        -: 1005:
    #####: 1006:    else if (choice2) //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1007:    {
        -: 1008:      //discard hand
    #####: 1009:      while (numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1010:      {
    #####: 1011:        discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1012:      }
        -: 1013:
        -: 1014:      //draw 4
    #####: 1015:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1016:      {
    #####: 1017:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1018:      }
        -: 1019:
        -: 1020:      //other players discard hand and redraw if hand size > 4
    #####: 1021:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1022:      {
    #####: 1023:        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1024:        {
    #####: 1025:          if (state->handCount[i] > 4)
branch  0 never executed
branch  1 never executed
        -: 1026:          {
        -: 1027:            //discard hand
    #####: 1028:            while (state->handCount[i] > 0)
branch  0 never executed
branch  1 never executed
        -: 1029:            {
    #####: 1030:              discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1031:            }
        -: 1032:
        -: 1033:            //draw 4
    #####: 1034:            for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1035:            {
    #####: 1036:              drawCard(i, state);
call    0 never executed
        -: 1037:            }
        -: 1038:          }
        -: 1039:        }
        -: 1040:      }
        -: 1041:    }
    #####: 1042:    return 0;
        -: 1043:
    #####: 1044:  case steward:
    #####: 1045:    if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1046:    {
        -: 1047:      //+2 cards
    #####: 1048:      drawCard(currentPlayer, state);
call    0 never executed
    #####: 1049:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1050:    }
    #####: 1051:    else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1052:    {
        -: 1053:      //+2 coins
    #####: 1054:      state->coins = state->coins + 2;
        -: 1055:    }
        -: 1056:    else
        -: 1057:    {
        -: 1058:      //trash 2 cards in hand
    #####: 1059:      discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1060:      discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1061:    }
        -: 1062:
        -: 1063:    //discard card from hand
    #####: 1064:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1065:    return 0;
        -: 1066:
    #####: 1067:  case tribute:
    #####: 1068:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
branch  0 never executed
branch  1 never executed
        -: 1069:    {
    #####: 1070:      if (state->deckCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1071:      {
    #####: 1072:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1073:        state->deckCount[nextPlayer]--;
        -: 1074:      }
    #####: 1075:      else if (state->discardCount[nextPlayer] > 0)
branch  0 never executed
branch  1 never executed
        -: 1076:      {
    #####: 1077:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer] - 1];
    #####: 1078:        state->discardCount[nextPlayer]--;
        -: 1079:      }
        -: 1080:      else
        -: 1081:      {
        -: 1082:        //No Card to Reveal
        -: 1083:        if (DEBUG)
        -: 1084:        {
        -: 1085:          printf("No cards to reveal\n");
        -: 1086:        }
        -: 1087:      }
        -: 1088:    }
        -: 1089:
        -: 1090:    else
        -: 1091:    {
    #####: 1092:      if (state->deckCount[nextPlayer] == 0)
branch  0 never executed
branch  1 never executed
        -: 1093:      {
    #####: 1094:        for (i = 0; i < state->discardCount[nextPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1095:        {
    #####: 1096:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i]; //Move to deck
    #####: 1097:          state->deckCount[nextPlayer]++;
    #####: 1098:          state->discard[nextPlayer][i] = -1;
    #####: 1099:          state->discardCount[nextPlayer]--;
        -: 1100:        }
        -: 1101:
    #####: 1102:        shuffle(nextPlayer, state); //Shuffle the deck
call    0 never executed
        -: 1103:      }
    #####: 1104:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1105:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1106:      state->deckCount[nextPlayer]--;
    #####: 1107:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer] - 1];
    #####: 1108:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1109:      state->deckCount[nextPlayer]--;
        -: 1110:    }
        -: 1111:
    #####: 1112:    if (tributeRevealedCards[0] == tributeRevealedCards[1])
branch  0 never executed
branch  1 never executed
        -: 1113:    { //If we have a duplicate card, just drop one
    #####: 1114:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1115:      state->playedCardCount++;
    #####: 1116:      tributeRevealedCards[1] = -1;
        -: 1117:    }
        -: 1118:
    #####: 1119:    for (i = 0; i <= 2; i++)
branch  0 never executed
branch  1 never executed
        -: 1120:    {
    #####: 1121:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1122:      { //Treasure cards
    #####: 1123:        state->coins += 2;
        -: 1124:      }
        -: 1125:
    #####: 1126:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
        -: 1127:      { //Victory Card Found
    #####: 1128:        drawCard(currentPlayer, state);
call    0 never executed
    #####: 1129:        drawCard(currentPlayer, state);
call    0 never executed
        -: 1130:      }
        -: 1131:      else
        -: 1132:      { //Action Card
    #####: 1133:        state->numActions = state->numActions + 2;
        -: 1134:      }
        -: 1135:    }
        -: 1136:
    #####: 1137:    return 0;
        -: 1138:
    #####: 1139:  case ambassador:
    #####: 1140:    j = 0; //used to check if player has enough cards to discard
        -: 1141:
    #####: 1142:    if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1143:    {
    #####: 1144:      return -1;
        -: 1145:    }
        -: 1146:
    #####: 1147:    if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1148:    {
    #####: 1149:      return -1;
        -: 1150:    }
        -: 1151:
    #####: 1152:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1153:    {
    #####: 1154:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1155:      {
    #####: 1156:        j++;
        -: 1157:      }
        -: 1158:    }
    #####: 1159:    if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1160:    {
    #####: 1161:      return -1;
        -: 1162:    }
        -: 1163:
        -: 1164:    if (DEBUG)
        -: 1165:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1166:
        -: 1167:    //increase supply count for choosen card by amount being discarded
    #####: 1168:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1169:
        -: 1170:    //each other player gains a copy of revealed card
    #####: 1171:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1172:    {
    #####: 1173:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1174:      {
    #####: 1175:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1176:      }
        -: 1177:    }
        -: 1178:
        -: 1179:    //discard played card from hand
    #####: 1180:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1181:
        -: 1182:    //trash copies of cards returned to supply
    #####: 1183:    for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1184:    {
    #####: 1185:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1186:      {
    #####: 1187:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1188:        {
    #####: 1189:          discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1190:          break;
        -: 1191:        }
        -: 1192:      }
        -: 1193:    }
        -: 1194:
    #####: 1195:    return 0;
        -: 1196:
    #####: 1197:  case cutpurse:
        -: 1198:
    #####: 1199:    updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1200:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1201:    {
    #####: 1202:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1203:      {
    #####: 1204:        for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1205:        {
    #####: 1206:          if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1207:          {
    #####: 1208:            discardCard(j, i, state, 0);
call    0 never executed
    #####: 1209:            break;
        -: 1210:          }
    #####: 1211:          if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1212:          {
    #####: 1213:            for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1214:            {
        -: 1215:              if (DEBUG)
        -: 1216:                printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1217:            }
    #####: 1218:            break;
        -: 1219:          }
        -: 1220:        }
        -: 1221:      }
        -: 1222:    }
        -: 1223:
        -: 1224:    //discard played card from hand
    #####: 1225:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1226:
    #####: 1227:    return 0;
        -: 1228:
    #####: 1229:  case embargo:
        -: 1230:  {
    #####: 1231:    int result = runEmbargo(currentPlayer, handPos, state, choice1);
call    0 never executed
    #####: 1232:    return result;
        -: 1233:  }
    #####: 1234:  case outpost:
        -: 1235:    //set outpost flag
    #####: 1236:    state->outpostPlayed++;
        -: 1237:
        -: 1238:    //discard card
    #####: 1239:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1240:    return 0;
        -: 1241:
    #####: 1242:  case salvager:
        -: 1243:    //+1 buy
    #####: 1244:    state->numBuys++;
        -: 1245:
    #####: 1246:    if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1247:    {
        -: 1248:      //gain coins equal to trashed card
    #####: 1249:      state->coins = state->coins + getCost(handCard(choice1, state));
call    0 never executed
call    1 never executed
        -: 1250:      //trash card
    #####: 1251:      discardCard(choice1, currentPlayer, state, 1);
call    0 never executed
        -: 1252:    }
        -: 1253:
        -: 1254:    //discard card
    #####: 1255:    discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1256:    return 0;
        -: 1257:
    #####: 1258:  case sea_hag:
    #####: 1259:    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1260:    {
    #####: 1261:      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1262:      {
    #####: 1263:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1264:        state->deckCount[i]--;
    #####: 1265:        state->discardCount[i]++;
    #####: 1266:        state->deck[i][state->deckCount[i]--] = curse; //Top card now a curse
        -: 1267:      }
        -: 1268:    }
    #####: 1269:    return 0;
        -: 1270:
    #####: 1271:  case treasure_map:
        -: 1272:    //search hand for another treasure_map
    #####: 1273:    index = -1;
    #####: 1274:    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1275:    {
    #####: 1276:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1277:      {
    #####: 1278:        index = i;
    #####: 1279:        break;
        -: 1280:      }
        -: 1281:    }
    #####: 1282:    if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1283:    {
        -: 1284:      //trash both treasure cards
    #####: 1285:      discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1286:      discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1287:
        -: 1288:      //gain 4 Gold cards
    #####: 1289:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1290:      {
    #####: 1291:        gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1292:      }
        -: 1293:
        -: 1294:      //return success
    #####: 1295:      return 1;
        -: 1296:    }
        -: 1297:
        -: 1298:    //no second treasure_map found in hand
    #####: 1299:    return -1;
        -: 1300:  }
        -: 1301:
    #####: 1302:  return -1;
        -: 1303:}
        -: 1304:
function runSmithy called 4002 returned 100% blocks executed 100%
     4002: 1305:void runSmithy(int currentPlayer, int handPos, struct gameState* state) 
        -: 1306:{
        -: 1307:    //+3 Cards
    20010: 1308:    for (int i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -: 1309:    {
    16008: 1310:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1311:    }
        -: 1312:
        -: 1313:    //discard card from hand
     4002: 1314:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     4002: 1315:}
        -: 1316:
function runAdventurer called 4002 returned 100% blocks executed 100%
     4002: 1317:void runAdventurer(int currentPlayer, int handPos, struct gameState* state, int drawntreasure, int temphand[], int cardDrawn, int z)
        -: 1318:{
   114006: 1319:  while (drawntreasure < 2)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1320:    {
   106002: 1321:      if (state->deckCount[currentPlayer] < 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1322:      { //if the deck is empty we need to shuffle discard and add to deck
      978: 1323:        shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1324:      }
   106002: 1325:      drawCard(currentPlayer, state);
call    0 returned 100%
   106002: 1326:      cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1]; //top card of hand is most recently drawn card.
   106002: 1327:      if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
     8004: 1328:        drawntreasure++;
        -: 1329:      else
        -: 1330:      {
    97998: 1331:        temphand[z] = cardDrawn;
    97998: 1332:        state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    97998: 1333:        z++;
        -: 1334:      }
        -: 1335:    }
   106002: 1336:    while (z - 1 >= 0)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -: 1337:    {
    97998: 1338:      state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    97998: 1339:      z = z - 1;
        -: 1340:    }
     4002: 1341:}
        -: 1342:
function runVillage called 4002 returned 100% blocks executed 100%
     4002: 1343:void runVillage(int currentPlayer, int handPos, struct gameState* state)
        -: 1344:{
        -: 1345:      //+1 Card
     4002: 1346:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1347:
        -: 1348:    //+2 Actions
     4002: 1349:    state->numActions = state->numActions + 3;
        -: 1350:
        -: 1351:    //discard played card from hand
     4002: 1352:    discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     4002: 1353:}
        -: 1354:
function runGreat_hall called 2 returned 100% blocks executed 100%
        2: 1355:void runGreat_hall(int currentPlayer, int handPos, struct gameState* state)
        -: 1356:{
        -: 1357:      //+1 Card
        2: 1358:    drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1359:
        -: 1360:    //+1 Actions
        2: 1361:    state->numActions++;
        -: 1362:
        -: 1363:    //discard card from hand
        -: 1364:    // discardCard(handPos, currentPlayer, state, 0); // bug (uncomment to fix)
        2: 1365:}
        -: 1366:
function runEmbargo called 0 returned 0% blocks executed 0%
    #####: 1367:int runEmbargo(int currentPlayer, int handPos, struct gameState* state, int choice1)
        -: 1368:{
        -: 1369:      //+2 Coins
    #####: 1370:    state->coins = state->coins + 2;
        -: 1371:
        -: 1372:    //see if selected pile is in play
    #####: 1373:    if (state->supplyCount[choice1] == -1)
branch  0 never executed
branch  1 never executed
        -: 1374:    {
    #####: 1375:      return -1;
        -: 1376:    }
        -: 1377:
        -: 1378:    //add embargo token to selected supply pile
    #####: 1379:    state->embargoTokens[choice1]++;
        -: 1380:
        -: 1381:    //trash card
    #####: 1382:    discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1383:    return 0;
        -: 1384:}
        -: 1385:
function discardCard called 8016 returned 100% blocks executed 89%
     8016: 1386:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1387:{
        -: 1388:
        -: 1389:  //if card is not trashed, added to Played pile
     8016: 1390:  if (trashFlag < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
        -: 1391:  {
        -: 1392:    //add card to played pile
     8010: 1393:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
     8010: 1394:    state->playedCardCount++;
        -: 1395:  }
        -: 1396:
        -: 1397:  //set played card to -1
     8016: 1398:  state->hand[currentPlayer][handPos] = -1;
        -: 1399:
        -: 1400:  //remove card from player's hand
     8016: 1401:  if (handPos == (state->handCount[currentPlayer] - 1)) //last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1402:  {
        -: 1403:    //reduce number of cards in hand
        4: 1404:    state->handCount[currentPlayer]--;
        -: 1405:  }
     8012: 1406:  else if (state->handCount[currentPlayer] == 1) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1407:  {
        -: 1408:    //reduce number of cards in hand
    #####: 1409:    state->handCount[currentPlayer]--;
        -: 1410:  }
        -: 1411:  else
        -: 1412:  {
        -: 1413:    //replace discarded card with last card in hand
     8012: 1414:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][(state->handCount[currentPlayer] - 1)];
        -: 1415:    //set last card to -1
     8012: 1416:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1417:    //reduce number of cards in hand
     8012: 1418:    state->handCount[currentPlayer]--;
        -: 1419:  }
        -: 1420:
     8016: 1421:  return 0;
        -: 1422:}
        -: 1423:
function gainCard called 416 returned 100% blocks executed 100%
      416: 1424:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1425:{
        -: 1426:  //Note: supplyPos is enum of choosen card
        -: 1427:
        -: 1428:  //check if supply pile is empty (0) or card is not used in game (-1)
      416: 1429:  if (supplyCount(supplyPos, state) < 1)
call    0 returned 100%
branch  1 taken 29% (fallthrough)
branch  2 taken 71%
        -: 1430:  {
      120: 1431:    return -1;
        -: 1432:  }
        -: 1433:
        -: 1434:  //added card for [whoseTurn] current player:
        -: 1435:  // toFlag = 0 : add to discard
        -: 1436:  // toFlag = 1 : add to deck
        -: 1437:  // toFlag = 2 : add to hand
        -: 1438:
      296: 1439:  if (toFlag == 1)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -: 1440:  {
       40: 1441:    state->deck[player][state->deckCount[player]] = supplyPos;
       40: 1442:    state->deckCount[player]++;
        -: 1443:  }
      256: 1444:  else if (toFlag == 2)
branch  0 taken 16% (fallthrough)
branch  1 taken 84%
        -: 1445:  {
       40: 1446:    state->hand[player][state->handCount[player]] = supplyPos;
       40: 1447:    state->handCount[player]++;
        -: 1448:  }
        -: 1449:  else
        -: 1450:  {
      216: 1451:    state->discard[player][state->discardCount[player]] = supplyPos;
      216: 1452:    state->discardCount[player]++;
        -: 1453:  }
        -: 1454:
        -: 1455:  //decrease number in supply pile
      296: 1456:  state->supplyCount[supplyPos]--;
        -: 1457:
      296: 1458:  return 0;
        -: 1459:}
        -: 1460:
function updateCoins called 13638 returned 100% blocks executed 100%
    13638: 1461:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1462:{
        -: 1463:  int i;
        -: 1464:
        -: 1465:  //reset coin count
    13638: 1466:  state->coins = 0;
        -: 1467:
        -: 1468:  //add coins for each Treasure card in player's hand
  1508562: 1469:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -: 1470:  {
  1494924: 1471:    if (state->hand[player][i] == copper)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1472:    {
    58088: 1473:      state->coins += 1;
        -: 1474:    }
  1436836: 1475:    else if (state->hand[player][i] == silver)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1476:    {
    56160: 1477:      state->coins += 2;
        -: 1478:    }
  1380676: 1479:    else if (state->hand[player][i] == gold)
branch  0 taken 4% (fallthrough)
branch  1 taken 96%
        -: 1480:    {
    55906: 1481:      state->coins += 3;
        -: 1482:    }
        -: 1483:  }
        -: 1484:
        -: 1485:  //add bonus
    13638: 1486:  state->coins += bonus;
        -: 1487:
    13638: 1488:  return 0;
        -: 1489:}
        -: 1490:
        -: 1491://end of dominion.c
